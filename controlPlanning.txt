// For the start state
fetch
    PCL_inc = 1
    IR_ld   = 1
    ...
    next depends on opcode

// Immediate addressing mode:
immed
    adc_imm
        PCL_inc = 1
        IR_ld   = 1
        
    and_imm
        PCL_inc = 1
        IR_ld   = 1
    cmp_imm
        PCL_inc = 1
        IR_ld   = 1
    cpx_imm
        PCL_inc = 1
        IR_ld   = 1
    cpy_imm
        PCL_inc = 1
        IR_ld   = 1
    eor_imm
        PCL_inc = 1
        IR_ld   = 1
    lda_imm
        PCL_inc = 1
        IR_ld   = 1
    ldx_imm
        PCL_inc = 1
        IR_ld   = 1
    ldy_imm
        PCL_inc = 1
        IR_ld   = 1
    ora_imm
        PCL_inc = 1
        IR_ld   = 1
    sbc_imm
        PCL_inc = 1
        IR_ld   = 1
    
// Accumulator or implied addressing:
accImp
    asl_acc
    clc_imp
    cld_imp
    cli_imp
    clv_imp
    dex_imp
    dey_imp
    inx_imp
    iny_imp
    lsr_acc
    nop_imp
    rol_acc
    ror_acc
    sec_imp
    sed_imp
    sei_imp
    tax_imp
    tay_imp
    tsx_imp
    txa_imp
    txs_imp
    tya_imp

// Zero-page read
zpg_r
    adc_zpg
    and_zpg
    bit_zpg
    cmp_zpg
    cpx_zpg
    cpy_zpg
    eor_zpg
    lda_zpg
    ldx_zpg
    ldy_zpg
    ora_zpg
    sbc_zpg
    
// Zero-page read-mod-write 
zpg_rmw
    asl_zpg
    dec_zpg
    inc_zpg
    lsr_zpg
    rol_zpg
    ror_zpg

// Zero-page write
zpg_w
    sta_zpg
    stx_zpg
    sty_zpg

// Zero-page idx, read
zpx_r
    adc_zpx
    and_zpx
    cmp_zpx
    eor_zpx
    lda_zpx
    ldx_zpx
    ora_zpx
    sbc_zpx
    
// Zero-page idx, read-mod-write
zpx_rmw
    asl_zpx
    dec_zpx
    inc_zpx
    lsr_zpx
    rol_zpx
    ror_zpx

// Zero-page idx, write
zpx_w
    sta_zpx
    sty_zpx

// Zero-page idy, read
zpy_r
    ldx_zpy

// Zero-page idy, write
zpy_w
    stx_zpy

// Relative
rel
    bcc_rel
    bcs_rel
    beq_rel
    bmi_rel
    bne_rel
    bpl_rel
    bvc_rel
    bvs_rel

// Absolute read
abs_r
    adc_abs
    adc_abx
    adc_aby
    and_abs
    and_abx
    and_aby
    bit_abs
    cmp_abs
    cmp_abx
    cmp_aby
    cpx_abs
    cpy_abs
    eor_abs
    eor_abx
    eor_aby
    lda_abs
    lda_abx
    lda_aby
    ldx_abs
    ldx_aby
    ldy_abs
    ldy_abx
    ora_abs
    ora_abx
    ora_aby
    sbc_abs
    sbc_abx
    sbc_aby
    
// Absolute rmodw
abs_rmw
    asl_abs
    asl_abx
    dec_abs
    dec_abx
    inc_abs
    inc_abx
    lsr_abs
    lsr_abx
    rol_abs
    rol_abx
    ror_abs
    ror_abx

// Absolute write
abs_w
    sta_abs
    sta_abx
    sta_aby
    stx_abs
    sty_abs

// x-indexed (index indirect)
inx
    adc_inx
    and_inx
    cmp_inx
    eor_inx
    lda_inx
    ora_inx
    sbc_inx
    sta_inx
    
// y-indexed (indirect index)
iny
    adc_iny
    and_iny
    cmp_iny
    eor_iny
    lda_iny
    ora_iny
    sbc_iny
    sta_iny

// Jump:
jmp_abs
jmp_ind

// Stack instructions:
brk_imp
pha_imp
php_imp
pla_imp
plp_imp
rti_imp
rts_imp
jsr_abs
